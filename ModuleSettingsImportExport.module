<?php

/**
 * ProcessWire Module Settings Import / Export
 * by Adrian Jones
 *
 * Adds import and export of settings to each module config page
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */


class ModuleSettingsImportExport extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Module Settings Import Export',
            'version' => '0.2.7',
            'summary' => 'Adds import and export of settings to each module config page.',
            'author' => 'Adrian Jones',
            'autoload' => function() {
                if(wire('page')->process == 'ProcessModule') return true;
                    else return false;
            },
            'icon' => 'cog'
        );
    }

    protected $data = array();
    protected $moduleName;
    protected $moduleVersion;
    protected $openSettings = false;
    protected $versionMismatch = false;
    protected $moduleMismatch = false;

   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
        return array(
            "backupSettingsOnUninstall" => 1
        );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        if($this->wire('input')->post->name) $this->moduleName = $this->wire('input')->post->name;
            else if($this->wire('input')->get->name) $this->moduleName = $this->wire('input')->get->name;

        if(!isset($this->moduleName) || $this->moduleName === $this->className) return;

        $info = $this->wire('modules')->getModuleInfoVerbose($this->moduleName);
        if(!$info['configurable']) return;

        $this->moduleName = $this->wire('sanitizer')->name($this->moduleName);
        $moduleInfo = $this->wire('modules')->getModuleInfo($this->moduleName);
        $this->moduleVersion = $moduleInfo['version'];

        if($this->wire('input')->post->importSettings && $this->isJson($this->wire('input')->post->moduleSettings)) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'importSettings');
        }

        if($this->wire('input')->post->restoreSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'restoreSettings');
        }

        if($this->wire('input')->post->backupSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'backupSettings');
        }

        if($this->data['backupSettingsOnUninstall']) {
            $this->addHookBefore('Modules::uninstall', $this, 'backupSettings');
        }

        $this->addHookAfter('ProcessModule::executeEdit', $this, 'displaySettings');

    }

    protected function importSettings() {
        $moduleSettings = json_decode($this->wire('input')->post->moduleSettings, true);
        $moduleName = key($moduleSettings);
        if($moduleName !== $this->moduleName) {
            $this->wire()->error('The pasted settings are for the ' . $moduleName . ' module, and not the ' . $this->moduleName . ' module and can\'t be imported.');
            $this->openSettings = true;
            $this->moduleMismatch = true;
            return;
        }
        $moduleVersion = $moduleSettings[$moduleName]['version'];
        if($moduleVersion !== $this->moduleVersion && !$this->wire('input')->post->versionOverride) {
            $this->wire()->warning('The pasted settings are for version ' . $moduleVersion . ', but ' . $this->moduleVersion . ' is currently installed. Confirm below to continue.');
            $this->openSettings = true;
            $this->versionMismatch = true;
            return;
        }
        $this->wire('modules')->saveModuleConfigData($this->moduleName, $moduleSettings[$this->moduleName]['settings']);
        $this->wire()->message('The pasted settings for the ' . $this->moduleName . ' module were successfully imported.');
    }

    protected function restoreSettings() {
        $this->wire('modules')->saveModuleConfigData($this->moduleName, $this->data['moduleSettings'][$this->moduleName]['settings']);
        $this->wire()->message('The settings for the ' . $this->moduleName . ' module were successfully restored from backup.');
    }

    protected function backupSettings($event) {
        $moduleName = $this->moduleName ? $this->moduleName : $event->arguments(0);
        unset($this->data['moduleSettings'][$moduleName]); // remove existing record for this module
        $this->data['moduleSettings'][$moduleName]['version'] = $this->moduleVersion;
        $this->data['moduleSettings'][$moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($moduleName);

        // save to config data with the rest of the settings
        $this->wire('modules')->saveModuleConfigData($this->wire('modules')->get(__CLASS__), $this->data);
        $this->wire()->message('The settings for the ' . $moduleName . ' module were successfully backed up.');
    }

    protected function displaySettings($event) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.js?v={$version}");
        $this->wire('config')->styles->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.css?v={$version}");


        $wrapper = new InputfieldWrapper();

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'ModuleSettingsImportExport');
        $fieldset->label = __("Settings Import / Export");
        $fieldset->collapsed = $this->openSettings ? Inputfield::collapsedNo : Inputfield::collapsedYes;
        $fieldset->icon = 'cog';
        $wrapper->add($fieldset);

        $form = $this->wire('modules')->get("InputfieldForm");
        $form->method = 'post';
        $form->action = $_SERVER['REQUEST_URI'];
        $fieldset->add($form);

        if($this->versionMismatch) {
            $f = $this->wire('modules')->get("InputfieldCheckbox");
            $f->name = 'versionOverride';
            $f->label = 'Version Override';
            $f->description = "The version of the settings you are trying to import is different to the version of the module currently installed. Check this and Import again.";
            $form->add($f);
        }

        $f = $this->wire('modules')->get("InputfieldTextarea");
        $f->name = 'moduleSettings';
        $f->label = 'Module Settings';
        $f->description = "Copy and paste into another site, or click Import Pasted Settings if you have pasted in settings from another install.";
        // if wrong version, then display last pasted settings, not already saved version
        if($this->versionMismatch || $this->moduleMismatch) {
            $f->value = $this->wire('input')->post->moduleSettings;
        }
        else {
            $moduleConfigData[$this->moduleName]['version'] = $this->moduleVersion;
            $moduleConfigData[$this->moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($this->moduleName);
            $f->value = json_encode($moduleConfigData);
        }
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'importSettings');
        $f->value = 'Import Pasted Settings';
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'backupSettings');
        $f->value = 'Backup Current Settings ('.$this->wire('modules')->formatVersion($this->moduleVersion).')';
        $form->add($f);

        if(isset($this->data['moduleSettings'][$this->moduleName])) {
            $f = $this->wire('modules')->get('InputfieldSubmit');
            $f->attr('id+name', 'restoreSettings');
            $f->value = 'Restore Settings from Backup ('.$this->wire('modules')->formatVersion($this->data['moduleSettings'][$this->moduleName]['version']).')';
            $form->add($f);
        }

        $event->return = $wrapper->render() . $event->return;

    }

    protected function isJson($string) {
        json_decode($string);
        return (json_last_error() == JSON_ERROR_NONE);
    }

    private function cmp($a, $b) {
        return strcmp($a->name, $b->name);
    }


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public function getModuleConfigInputfields(array $data) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.js?v={$version}");
        $this->wire('config')->styles->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.css?v={$version}");

        $data = array_merge(self::getDefaultData(), $data);

        if ($this->wire('input')->post->updateAll) {
            $moduleSettings = json_decode($this->wire('input')->post->allModuleSettings, true);
            foreach($moduleSettings as $moduleName => $module) {
                $moduleVersion = $moduleSettings[$moduleName]['version'];
                $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
                if($moduleVersion !== $moduleInfo['version'] && !$this->wire('input')->post->versionOverride) {
                    $this->wire()->warning('The pasted settings for the ' . $moduleName . ' module are for version ' . $moduleVersion . ', but ' . $moduleInfo['version'] . ' is currently installed. Please check the "Version Override" option and try again.');
                }
                else {
                    $this->wire('modules')->saveModuleConfigData($moduleName, $module['settings']);
                    $this->wire()->message('The pasted settings for the ' . $moduleName . ' module were successfully imported.');
                }
            }
        }

        $wrapper = new InputfieldWrapper();

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'backupSettingsOnUninstall');
        $f->label = __('Automatically Backup Settings on Uninstall', __FILE__);
        $f->description = __('If checked, settings will be saved when any module is uninstalled.', __FILE__);
        $f->attr('checked', $data['backupSettingsOnUninstall'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        if(isset($data['moduleSettings'])) {
            $fieldset = $this->wire('modules')->get("InputfieldFieldset");
            $fieldset->attr('name', 'backedUpSettings');
            $fieldset->label = 'Backed Up Settings';
            $fieldset->description = 'These are primarily here as information, but you can copy from here if you wish. The version numbers are: Backed Up Version (Current Installed Version).';
            $fieldset->collapsed = Inputfield::collapsedYes;
            $wrapper->add($fieldset);

            foreach($data['moduleSettings'] as $moduleName => $module) {
                $moduleSettings = array();
                $info = $this->wire('modules')->getModuleInfoVerbose($moduleName);
                if(!$info['configurable']) continue;
                $f = $this->wire('modules')->get("InputfieldTextarea");
                $f->attr('name', 'settings_'.$moduleName);
                $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
                $moduleVersion = $moduleInfo['version'];
                $f->label = $moduleName . ': ' . $this->wire('modules')->formatVersion($module['version']) . ' (' . ($this->wire('modules')->isInstalled($moduleName) ? $this->wire('modules')->formatVersion($moduleVersion) : 'Not Installed') . ')';
                $f->description = "[Edit module](".$this->wire('config')->urls->admin."module/edit?name=".$moduleName.")";
                $f->collapsed = Inputfield::collapsedYes;
                $moduleSettings[$moduleName] = $module;
                $f->attr('readonly', 'readonly');
                $f->attr('disabled', 'disabled');
                $f->value = json_encode($moduleSettings);
                $fieldset->add($f);
            }
        }

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('name', 'batchModuleSettings');
        $fieldset->label = 'Export/Import Multiple Module Settings';
        $fieldset->collapsed = Inputfield::collapsedYes;
        $wrapper->add($fieldset);

        $f = $this->wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'selectedModules');
        $f->label = 'Selected Modules';
        $f->description = 'Select modules to build settings json that can be copied from the "Settings" field below and pasted into another ProcessWire site.';
        $f->addOption('toggleAll', 'TOGGLE ALL');
        $moduleSettingsArr = array();
        $modulesArr = $this->wire('modules')->getArray();
        ksort($modulesArr);
        foreach($modulesArr as $moduleName => $module) {
            $moduleConfigData = array();
            $info = $this->wire('modules')->getModuleInfoVerbose($moduleName);
            if(!$info['configurable']) continue;
            $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
            $moduleConfigData[$moduleName]['version'] = $moduleInfo['version'];
            $moduleConfigData[$moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($moduleName);
            $moduleSettingsArr[$moduleName] = json_encode($moduleConfigData);
            $f->addOption($moduleName, $moduleName.' ('.$this->wire('modules')->formatVersion($moduleInfo['version']).')');
        }
        $fieldset->add($f);
        $this->wire('config')->js("allModuleSettings", $moduleSettingsArr);

        $f = $this->wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'allModuleSettings');
        $f->label = 'Settings';
        $f->description = 'Copy from here to another ProcessWire site. Or paste here and check "Update All" to install these settings to this site.';
        $f->value = '';
        $fieldset->add($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'updateAll');
        $f->label = 'Update All';
        $f->description = 'If checked when the Submit button is clicked, all modules will be updated with the settings entered above.';
        $f->notes = 'Please be careful, this can\'t be reversed.';
        $f->columnWidth = 50;
        $fieldset->add($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->name = 'versionOverride';
        $f->label = 'Version Override';
        $f->description = "Check this to force settings to be imported even if there is a version mismatch between the settings and the module version currently installed.";
        $f->columnWidth = 50;
        $fieldset->add($f);


        return $wrapper;

    }


}