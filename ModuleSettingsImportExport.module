<?php

/**
 * ProcessWire Module Settings Import / Export
 * by Adrian Jones
 *
 * Adds import and export of settings to each module config page
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */


class ModuleSettingsImportExport extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Module Settings Import Export',
            'version' => '0.1.0',
            'summary' => 'Adds import and export of settings to each module config page.',
            'author' => 'Adrian Jones',
            'autoload' => function() {
                if(wire('page')->process == 'ProcessModule') return true;
                    else return false;
            },
            'icon' => 'cog'
        );
    }

    protected $data = array();
    protected $moduleName;
    protected $moduleVersion;
    protected $openSettings = false;
    protected $versionMismatch = false;
    protected $moduleMismatch = false;

   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
        return array(
            "backupSettingsOnUninstall" => 1
        );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        if($this->wire('input')->post->name) $moduleName = $this->wire('input')->post->name;
            else if($this->wire('input')->get->name) $moduleName = $this->wire('input')->get->name;

        if(!isset($moduleName)) return;

        $this->moduleName = $this->wire('sanitizer')->name($moduleName);
        $moduleInfo = $this->wire('modules')->getModuleInfo($this->moduleName);
        $this->moduleVersion = $moduleInfo['version'];

        if($this->wire('input')->post->importSettings && $this->isJson($this->wire('input')->post->moduleSettings)) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'importSettings');
        }

        if($this->wire('input')->post->restoreSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'restoreSettings');
        }

        if($this->wire('input')->post->backupSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'backupSettings');
        }

        if($this->data['backupSettingsOnUninstall']) {
            $this->addHookAfter('Module::uninstall', $this, 'backupSettings');
        }

        $this->addHookAfter('ProcessModule::executeEdit', $this, 'displaySettings');

    }

    protected function importSettings() {
        $moduleSettings = json_decode($this->wire('input')->post->moduleSettings, true);
        $moduleName = key($moduleSettings);
        if($moduleName !== $this->moduleName) {
            $this->wire()->error('The pasted settings are for the ' . $moduleName . ' module, and not the ' . $this->moduleName . ' module and can\'t be imported.');
            $this->openSettings = true;
            $this->moduleMismatch = true;
            return;
        }
        $moduleVersion = $moduleSettings[$moduleName]['version'];
        if($moduleVersion !== $this->moduleVersion && !$this->wire('input')->post->versionOverride) {
            $this->wire()->warning('The pasted settings are for version ' . $moduleVersion . ', but ' . $this->moduleVersion . ' is currently installed. Confirm below to continue.');
            $this->openSettings = true;
            $this->versionMismatch = true;
            return;
        }
        $this->modules->saveModuleConfigData($this->moduleName, $moduleSettings[$this->moduleName]['settings']);
        $this->wire()->message('The pasted settings for the ' . $this->moduleName . ' module were successfully imported.');
    }

    protected function restoreSettings() {
        $this->modules->saveModuleConfigData($this->moduleName, $this->data['moduleSettings'][$this->moduleName]['settings']);
        $this->wire()->message('The settings for the ' . $this->moduleName . ' module were successfully restore from backup.');
    }

    protected function backupSettings($event) {
        // not using $this->moduleName because this might be called from outside of ProcessModule page
        $moduleName = $event->object instanceof ProcessModule ? $this->moduleName : (string)$event->object;
        unset($this->data['moduleSettings'][$moduleName]); // remove existing record for this module
        $this->data['moduleSettings'][$moduleName]['version'] = $this->moduleVersion;
        $this->data['moduleSettings'][$moduleName]['settings'] = $this->modules->getModuleConfigData($moduleName);

        // save to config data with the rest of the settings
        $this->modules->saveModuleConfigData($this->modules->get(__CLASS__), $this->data);
        $this->wire()->message('The settings for the ' . $this->moduleName . ' module were successfully backed up.');
    }

    protected function displaySettings($event) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.js?v={$version}");
        $this->wire('config')->styles->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.css?v={$version}");


        $wrapper = new InputfieldWrapper();

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'ModuleSettingsImportExport');
        $fieldset->label = __("Settings Import / Export");
        $fieldset->collapsed = $this->openSettings ? Inputfield::collapsedNo : Inputfield::collapsedYes;
        $fieldset->icon = 'cog';
        $wrapper->add($fieldset);

        $form = $this->wire('modules')->get("InputfieldForm");
        $form->method = 'post';
        $form->action = $_SERVER['REQUEST_URI'];
        $fieldset->add($form);

        if($this->versionMismatch) {
            $f = $this->wire('modules')->get("InputfieldCheckbox");
            $f->name = 'versionOverride';
            $f->label = 'Version Override';
            $f->description = "The version of the settings you are trying to import is different to the version of the module currently installed. Check this and Import again.";
            $form->add($f);
        }

        $f = $this->wire('modules')->get("InputfieldTextarea");
        $f->name = 'moduleSettings';
        $f->label = 'Module Settings';
        $f->description = "Copy and paste into another site, or click Import Pasted Settings if you have pasted in settings from another install.";
        // if wrong version, then display last pasted settings, not already saved version
        if($this->versionMismatch || $this->moduleMismatch) {
            $f->value = $this->wire('input')->post->moduleSettings;
        }
        else {
            $moduleConfigData[$this->moduleName]['version'] = $this->moduleVersion;
            $moduleConfigData[$this->moduleName]['settings'] = $this->modules->getModuleConfigData($this->moduleName);
            $f->value = json_encode($moduleConfigData);
        }
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'importSettings');
        $f->value = 'Import Pasted Settings';
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'backupSettings');
        $f->value = 'Backup Current Settings';
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'restoreSettings');
        $f->value = 'Restore Settings from Backup';
        $form->add($f);

        $event->return = $wrapper->render() . $event->return;

    }

    protected function isJson($string) {
        json_decode($string);
        return (json_last_error() == JSON_ERROR_NONE);
    }

    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'backupSettingsOnUninstall');
        $f->label = __('Automatically Backup Settings on Uninstall', __FILE__);
        $f->description = __('If checked, settings will be saved when a module is uninstalled.', __FILE__);
        $f->attr('checked', $data['backupSettingsOnUninstall'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

        return $wrapper;

    }


}