<?php

/**
 * ProcessWire Module Settings Import / Export
 * by Adrian Jones
 *
 * Adds import and export of settings to each module config page
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */


class ModuleSettingsImportExport extends WireData implements Module, ConfigurableModule {

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {
        return array(
            'title' => 'Module Settings Import Export',
            'version' => '0.2.9',
            'summary' => 'Adds import and export of settings to each module config page.',
            'author' => 'Adrian Jones',
            'autoload' => function() {
                if(wire('page')->process == 'ProcessModule') return true;
                    else return false;
            },
            'icon' => 'cog'
        );
    }

    protected $data = array();
    protected $moduleName;
    protected $moduleVersion;
    protected $openSettings = false;
    protected $versionMismatch = false;
    protected $moduleMismatch = false;

   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
        return array(
            "backupSettingsOnUninstall" => 1
        );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }

    /**
     * Initialize the module and setup hooks
     */
    public function init() {

        if($this->wire('input')->post->name) $this->moduleName = $this->wire('input')->post->name;
            else if($this->wire('input')->get->name) $this->moduleName = $this->wire('input')->get->name;

        if(!isset($this->moduleName) || $this->moduleName === $this->className) return;

        $info = $this->wire('modules')->getModuleInfoVerbose($this->moduleName);
        if(!$info['configurable']) return;

        $this->moduleName = $this->wire('sanitizer')->name($this->moduleName);
        $moduleInfo = $this->wire('modules')->getModuleInfo($this->moduleName);
        $this->moduleVersion = $moduleInfo['version'];

        if($this->wire('input')->post->importSettings && $this->isJson($this->wire('input')->post->moduleSettings)) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'importSettings');
        }

        if($this->wire('input')->post->restoreSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'restoreSettings');
        }

        if($this->wire('input')->post->backupSettings) {
            $this->addHookBefore('ProcessModule::executeEdit', $this, 'backupSettings');
        }

        if($this->data['backupSettingsOnUninstall']) {
            $this->addHookBefore('Modules::uninstall', $this, 'backupSettings');
        }

        $this->addHookAfter('ProcessModule::executeEdit', $this, 'displaySettings');

    }

    protected function importSettings() {
		$moduleJsonSettings = $this->wire('input')->post->moduleSettings;
        $moduleSettings = json_decode($moduleJsonSettings, true);
		if($this->data['useNames']) {
			$moduleSettings = json_decode($this->convertJsonRefs($moduleJsonSettings, 'name', 'id'), true);
		}
		if(!is_array($moduleSettings)) {
			$this->wire()->error('The pasted settings are not in a valid JSON format and can\'t be imported.');
			$this->openSettings = true;
			return;
		}
        $moduleName = key($moduleSettings);
        if($moduleName !== $this->moduleName) {
            $this->wire()->error('The pasted settings are for the ' . $moduleName . ' module, and not the ' . $this->moduleName . ' module and can\'t be imported.');
            $this->openSettings = true;
            $this->moduleMismatch = true;
            return;
        }
        $moduleVersion = $moduleSettings[$moduleName]['version'];
        if($moduleVersion !== $this->moduleVersion && !$this->wire('input')->post->versionOverride) {
            $this->wire()->warning('The pasted settings are for version ' . $moduleVersion . ', but ' . $this->moduleVersion . ' is currently installed. Confirm below to continue.');
            $this->openSettings = true;
            $this->versionMismatch = true;
            return;
        }
        $this->wire('modules')->saveModuleConfigData($this->moduleName, $moduleSettings[$this->moduleName]['settings']);
        $this->wire()->message('The pasted settings for the ' . $this->moduleName . ' module were successfully imported.');
    }

    protected function restoreSettings() {
        $this->wire('modules')->saveModuleConfigData($this->moduleName, $this->data['moduleSettings'][$this->moduleName]['settings']);
        $this->wire()->message('The settings for the ' . $this->moduleName . ' module were successfully restored from backup.');
    }

    protected function backupSettings($event) {
        $moduleName = $this->moduleName ? $this->moduleName : $event->arguments(0);
        unset($this->data['moduleSettings'][$moduleName]); // remove existing record for this module
        $this->data['moduleSettings'][$moduleName]['version'] = $this->moduleVersion;
        $this->data['moduleSettings'][$moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($moduleName);

        // save to config data with the rest of the settings
        $this->wire('modules')->saveModuleConfigData($this->wire('modules')->get(__CLASS__), $this->data);
        $this->wire()->message('The settings for the ' . $moduleName . ' module were successfully backed up.');
    }

    protected function displaySettings($event) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.js?v={$version}");
        $this->wire('config')->styles->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.css?v={$version}");


        $wrapper = new InputfieldWrapper();

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'ModuleSettingsImportExport');
        $fieldset->label = __('Settings Import / Export', __FILE__);
        $fieldset->collapsed = $this->openSettings ? Inputfield::collapsedNo : Inputfield::collapsedYes;
        $fieldset->icon = 'cog';
        $wrapper->add($fieldset);

        $form = $this->wire('modules')->get("InputfieldForm");
        $form->method = 'post';
        $form->action = $_SERVER['REQUEST_URI'];
        $fieldset->add($form);

        if($this->versionMismatch) {
            $f = $this->wire('modules')->get("InputfieldCheckbox");
            $f->name = 'versionOverride';
            $f->label = __('Version Override', __FILE__);
            $f->description = __('The version of the settings you are trying to import is different to the version of the module currently installed. Check this and Import again.', __FILE__);
            $form->add($f);
        }

        $f = $this->wire('modules')->get("InputfieldTextarea");
        $f->name = 'moduleSettings';
        $f->label = __('Module Settings', __FILE__);
        $f->description = __('Copy and paste into another site, or click Import Pasted Settings if you have pasted in settings from another install.', __FILE__);
        // if wrong version, then display last pasted settings, not already saved version
        if($this->versionMismatch || $this->moduleMismatch) {
            $f->value = $this->wire('input')->post->moduleSettings;
        }
        else {
            $moduleConfigData[$this->moduleName]['version'] = $this->moduleVersion;
            $moduleConfigData[$this->moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($this->moduleName);
            $f->value = json_encode($moduleConfigData);
			if($this->data['useNames']) {
				$f->value = $this->convertJsonRefs($f->value, 'id', 'name');
			}
        }
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'importSettings');
        $f->value = 'Import Pasted Settings';
        $form->add($f);

        $f = $this->wire('modules')->get('InputfieldSubmit');
        $f->attr('id+name', 'backupSettings');
        $f->value = 'Backup Current Settings ('.$this->wire('modules')->formatVersion($this->moduleVersion).')';
        $form->add($f);

        if(isset($this->data['moduleSettings'][$this->moduleName])) {
            $f = $this->wire('modules')->get('InputfieldSubmit');
            $f->attr('id+name', 'restoreSettings');
            $f->value = 'Restore Settings from Backup ('.$this->wire('modules')->formatVersion($this->data['moduleSettings'][$this->moduleName]['version']).')';
            $form->add($f);
        }

        $event->return = $wrapper->render() . $event->return;

    }

    protected function isJson($string) {
        json_decode($string);
        return (json_last_error() == JSON_ERROR_NONE);
    }

    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public function getModuleConfigInputfields(array $data) {

        $conf = $this->getModuleInfo();
        $version = (int) $conf['version'];
        $this->wire('config')->scripts->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.js?v={$version}");
        $this->wire('config')->styles->add($this->wire('config')->urls->ModuleSettingsImportExport . "ModuleSettingsImportExport.css?v={$version}");

        $data = array_merge(self::getDefaultData(), $data);

        if ($this->wire('input')->post->updateAll) {
            $moduleSettings = json_decode($this->wire('input')->post->allModuleSettings, true);
            foreach($moduleSettings as $moduleName => $module) {
                $moduleVersion = $moduleSettings[$moduleName]['version'];
                $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
                if($moduleVersion !== $moduleInfo['version'] && !$this->wire('input')->post->versionOverride) {
                    $this->wire()->warning('The pasted settings for the ' . $moduleName . ' module are for version ' . $moduleVersion . ', but ' . $moduleInfo['version'] . ' is currently installed. Please check the "Version Override" option and try again.');
                }
                else {
                    $this->wire('modules')->saveModuleConfigData($moduleName, $module['settings']);
                    $this->wire()->message('The pasted settings for the ' . $moduleName . ' module were successfully imported.');
                }
            }
        }

        $wrapper = new InputfieldWrapper();

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'backupSettingsOnUninstall');
        $f->label = __('Automatically Backup Settings on Uninstall', __FILE__);
        $f->description = __('If checked, settings will be saved when any module is uninstalled.', __FILE__);
        $f->attr('checked', $data['backupSettingsOnUninstall'] == '1' ? 'checked' : '' );
        $wrapper->add($f);

		$f = $this->wire('modules')->get("InputfieldCheckbox");
		$f->attr('name', 'useNames');
		$f->label = __('Use names/paths rather than ids in export/import json (Experimental)', __FILE__);
		$f->description = __('If checked, all exports will reference names/paths rather than ids and all imports will expect names/paths.', __FILE__);
		$f->notes = __('If checked, imports using ids might work but cannot be guaranteed.', __FILE__);
		$f->attr('checked', $data['useNames'] == '1' ? 'checked' : '' );
		$wrapper->add($f);

        if(isset($data['moduleSettings'])) {
            $fieldset = $this->wire('modules')->get("InputfieldFieldset");
            $fieldset->attr('name', 'backedUpSettings');
            $fieldset->label = __('Backed Up Settings', __FILE__);
            $fieldset->description = __('These are primarily here as information, but you can copy from here if you wish. The version numbers are: Backed Up Version (Current Installed Version).', __FILE__);
            $fieldset->collapsed = Inputfield::collapsedYes;
            $wrapper->add($fieldset);

            foreach($data['moduleSettings'] as $moduleName => $module) {
                $moduleSettings = array();
                $info = $this->wire('modules')->getModuleInfoVerbose($moduleName);
                if(!$info['configurable']) continue;
                $f = $this->wire('modules')->get("InputfieldTextarea");
                $f->attr('name', 'settings_'.$moduleName);
                $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
                $moduleVersion = $moduleInfo['version'];
                $f->label = $moduleName . ': ' . $this->wire('modules')->formatVersion($module['version']) . ' (' . ($this->wire('modules')->isInstalled($moduleName) ? $this->wire('modules')->formatVersion($moduleVersion) : 'Not Installed') . ')';
                $f->description = "[Edit module](".$this->wire('config')->urls->admin."module/edit?name=".$moduleName.")";
                $f->collapsed = Inputfield::collapsedYes;
                $moduleSettings[$moduleName] = $module;
                $f->attr('readonly', 'readonly');
                $f->attr('disabled', 'disabled');
                $f->value = json_encode($moduleSettings);
                $fieldset->add($f);
            }
        }

        $fieldset = $this->wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('name', 'batchModuleSettings');
        $fieldset->label = __('Export/Import Multiple Module Settings', __FILE__);
        $fieldset->collapsed = Inputfield::collapsedYes;
        $wrapper->add($fieldset);

        $f = $this->wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'selectedModules');
        $f->label = __('Selected Modules', __FILE__);
        $f->description = __('Select modules to build settings json that can be copied from the "Settings" field below and pasted into another ProcessWire site.', __FILE__);
        $f->addOption('toggleAll', __('TOGGLE ALL', __FILE__));
        $moduleSettingsArr = array();
        $modulesArr = $this->wire('modules')->getArray();
        ksort($modulesArr);
        foreach($modulesArr as $moduleName => $module) {
            $moduleConfigData = array();
            $info = $this->wire('modules')->getModuleInfoVerbose($moduleName);
            if(!$info['configurable']) continue;
            $moduleInfo = $this->wire('modules')->getModuleInfo($moduleName);
            $moduleConfigData[$moduleName]['version'] = $moduleInfo['version'];
            $moduleConfigData[$moduleName]['settings'] = $this->wire('modules')->getModuleConfigData($moduleName);
            $moduleSettingsArr[$moduleName] = json_encode($moduleConfigData);
            $f->addOption($moduleName, $moduleName.' ('.$this->wire('modules')->formatVersion($moduleInfo['version']).')');
        }
        $fieldset->add($f);
        $this->wire('config')->js("allModuleSettings", $moduleSettingsArr);

        $f = $this->wire('modules')->get("InputfieldTextarea");
        $f->attr('name', 'allModuleSettings');
        $f->label = __('Settings', __FILE__);
        $f->description = __('Copy from here to another ProcessWire site. Or paste here and check "Update All" to install these settings to this site.', __FILE__);
        $f->value = '';
        $fieldset->add($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'updateAll');
        $f->label = __('Update All', __FILE__);
        $f->description = __('If checked when the Submit button is clicked, all modules will be updated with the settings entered above.', __FILE__);
        $f->notes = __('Please be careful, this can\'t be reversed.', __FILE__);
        $f->columnWidth = 50;
        $fieldset->add($f);

        $f = $this->wire('modules')->get("InputfieldCheckbox");
        $f->name = 'versionOverride';
        $f->label = __('Version Override', __FILE__);
        $f->description = __('Check this to force settings to be imported even if there is a version mismatch between the settings and the module version currently installed.', __FILE__);
        $f->columnWidth = 50;
        $fieldset->add($f);

        return $wrapper;

    }


	/*
	 * Method to convert json string with ids into one that uses names/paths instead and vice-versa
	 * @param string $json
	 * @param string $from - 'id' or 'name'
	 * @param string $to - 'id' or 'name'
	 *
	 * @return string
	 */
	public function convertJsonRefs($json, $from, $to) {
		$pageTo = ($to == 'name') ? 'path' : 'id';
		/***************************************************************
		 * This first section deals with data in the module settings of the form xxx=yyy
		 **************************************************************/
		$matches = [];
		if($from == 'id' && $to == 'name') {
			/* The following regex pattern is designed to match occurrences of words like xxx{comparator}yyy where yyy is an integer or a pipe-separated list of integers, and yyy is not 0.
			Here's a breakdown of the pattern:
			"?([^",]+?)"?: Matches an optional leading double quote, followed by one or more characters that are not double quotes or commas, and an optional trailing double quote. This captures the xxx part.
			\s*(=|!=)\s*: Matches zero or more whitespace characters, followed by either = or !=, and then zero or more whitespace characters. This captures the comparator.
			(?!0\b)(\d+(?:\|(?!0\b)\d+)*): Uses a negative lookahead (?!0\b) to ensure that yyy is not 0. Then, it matches one or more digits followed by zero or more occurrences of | and digits, ensuring none of the digits are 0.
			(?=[,"]): Positive lookahead to ensure that the match is followed by a comma or a double quote.
			This pattern ensures that yyy is a non-zero integer or a pipe-separated list of non-zero integers. */
			$pattern = '/"?([^",]+?)"?\s*(=|!=)\s*(?!0\b)(\d+(?:\|(?!0\b)\d+)*)(?=[,"])/';
		} else {
			/* The following regex pattern is designed to match occurrences of words like xxx{comparator}yyy where yyy is an alphanumeric string that may include slashes, hyphens, underscores, or be a pipe-separated list of such strings.
			Here's a breakdown of the pattern:
			"?([^",]+?)"?: Matches an optional leading double quote, followed by one or more characters that are not double quotes or commas, and an optional trailing double quote. This captures the xxx part.
			\s*(=|!=)\s*: Matches zero or more whitespace characters, followed by either = or !=, and then zero or more whitespace characters. This captures the comparator.
			([a-zA-Z0-9\/_-]+(?:\|[a-zA-Z0-9\/_-]+)*): Matches one or more alphanumeric characters, slashes, hyphens, or underscores, followed by zero or more occurrences of | and similar characters. This captures the yyy part.
			(?=[,"]): Positive lookahead to ensure that the match is followed by a comma or a double quote.
			This pattern ensures that yyy can be a single alphanumeric string or a pipe-separated list of such strings. */
			$pattern = '/"?([^",]+?)"?\s*(=|!=)\s*([a-zA-Z0-9\/_-]+(?:\|[a-zA-Z0-9\/_-]+)*)(?=[,"])/';
		}
		// Find all matches
		preg_match_all($pattern, $json, $matches, PREG_SET_ORDER);

		foreach($matches as $match) {
			$match1 = trim($match[1]);
			if($match1 == 'template') {
				$match3 = explode('|', $match[3]);
				$templates = [];
				foreach($match3 as $ref) {
					$template = $this->templates->get($ref);
					$templates[] = $template->$to;
				}
				$templateRef = implode('|', $templates);
				$replace = $match[1] . $match[2] . $templateRef;
			} else if($match1 == 'field') {
				$match3 = explode('|', $match[3]);
				$fields = [];
				foreach($match3 as $ref) {
					$field = $this->fields->get($ref);
					$fields[] = $field->$to;
				}
				$fieldRef = implode('|', $fields);
				$replace = $match[1] . $match[2] . $fieldRef;
			} else {
				$match3 = explode('|', $match[3]);
				$pages = [];
				foreach($match3 as $ref) {
					$page = $this->pages->get($ref);
					if($match1 == 'parent' || $match1 == 'has_parent') {
						$pages[] = $page->$pageTo;
					} else {
						// If $match[1] contains a dot, the field is just the part after the (last) dot
						$parts = explode('.', $match1);
						$field = $this->fields->get($parts[count($parts) - 1]);
						if(is_a($field, 'ProcessWire\PageField')) {
							$pages[] = $page->$pageTo;
						} else {
//							if($field && !($field->type == 'FieldtypeInteger')) $this->error("Field $match1 is not a page reference field"); // removed as over-aggressive
							$pages[] = $ref;
						}
					}
				}
				$replace = $match[1] . $match[2] . implode('|', $pages);
			}
			$pattern = '/' . preg_quote(trim($match[0], '",'), '/') . '(?=\b|,|\s|")/';
			preg_match($pattern, $json, $matches2, PREG_OFFSET_CAPTURE);
			$json = preg_replace($pattern, $replace, $json);
		}
#
		/*************************************************************
		 * This next section deals with config fields which take the form xxx: yyy
		 ***********************************************************/
		// get the first word inside double quotes in the json string. This should be the module name
		preg_match('/"([^"]+)"/', $json, $moduleNameMatches);
		$moduleName = $moduleNameMatches[1];
		$module = $this->modules->get($moduleName);
		if(!$module) {
			$this->error("Module $moduleName is not installed");
		} else {
			$matches = [];
			if($from == 'id' && $to == 'name') {
				/* This regular expression pattern is designed to match key-value pairs in a JSON string where the value is a number. Here's a breakdown of the pattern:
				": Matches the opening double quote of the key.
				([^"]+): Captures one or more characters that are not double quotes (the key) inside a capturing group.
				": Matches the closing double quote of the key.
				:: Matches the colon that separates the key and the value.
				\s*: Matches zero or more whitespace characters.
				(\d+): Captures one or more digits (the value) inside a capturing group.
				(?=[,}]): Positive lookahead to ensure that the match is followed by either a comma or a closing curly brace.
				This ensures that the value is properly terminated in the JSON structure.
				 */
				$pattern = '/"([^"]+)":\s*(\d+)(?=[,}])/';
			} else {
				/*This regular expression pattern is designed to match key-value pairs in a JSON string where the value is an alphanumeric string that may include slashes, hyphens, or underscores. Here's a breakdown of the pattern:
				": Matches the opening double quote of the key.
				([^"]+): Captures one or more characters that are not double quotes (the key) inside a capturing group.
				": Matches the closing double quote of the key.
				:: Matches the colon that separates the key and the value.
				\s*: Matches zero or more whitespace characters.
				"?([a-zA-Z0-9\/_-]+)"?: Optionally matches a double quote, then captures one or more alphanumeric characters, slashes, hyphens, or underscores (the value) inside a capturing group, and optionally matches a closing double quote.
				(?=[,}]): Positive lookahead to ensure that the match is followed by either a comma or a closing curly brace.
				This ensures that the value is properly terminated in the JSON structure.
				*/
				$pattern = '/"([^"]+)":\s*"?([a-zA-Z0-9\/_-]+)"?(?=[,}])/';
			}
			// find all matches
			preg_match_all($pattern, $json, $matches, PREG_SET_ORDER);
			if(count($matches) > 0) {
				$configData = $this->wire()->modules->getConfig($moduleName);
				foreach($matches as $match) {
					if(!isset($configData[$match[1]])) {
//						$this->error("Field $match[1] is not a config field for module $moduleName"); // removed as over-aggressive
						continue;
					}
					// Get the module config inputfields
					$moduleClass = get_class($module);
					$methodChecker = new \ReflectionMethod($moduleClass,'getModuleConfigInputfields');
					if($methodChecker->isStatic()) {
						$wrap = $module->getModuleConfigInputfields([]);
					} else {
						$wrap = new InputfieldWrapper;
						$module->getModuleConfigInputfields($wrap);
					}
					//
					// Find the field in the inputfields (as an object)
					$field = $wrap->get($match[1]);
					if(is_a($field, 'ProcessWire\InputfieldPage') || is_a($field, 'ProcessWire\InputfieldPageListSelect') || is_a($field, 'ProcessWire\InputfieldPageAutocomplete')) {
						$page = $this->pages->get($match[2]);
						$json = str_replace($match[0], '"' . $match[1] . '"' . ':' . '"' . $page->$pageTo . '"', $json);
					}
				}
			}
		}
		return $json;
	}

}